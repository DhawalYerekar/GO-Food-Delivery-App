// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hotel.sql

package db

import (
	"context"
)

const createHotel = `-- name: CreateHotel :one
INSERT INTO hotel (
  name,email,address,contact
) VALUES (
  $1, $2,$3,$4
)
RETURNING id, name, email, address, contact
`

type CreateHotelParams struct {
	Name    string `json:"name"`
	Email   string `json:"email"`
	Address string `json:"address"`
	Contact string `json:"contact"`
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) (Hotel, error) {
	row := q.db.QueryRowContext(ctx, createHotel,
		arg.Name,
		arg.Email,
		arg.Address,
		arg.Contact,
	)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Contact,
	)
	return i, err
}

const deleteHotel = `-- name: DeleteHotel :exec
DELETE FROM hotel
WHERE id = $1
`

func (q *Queries) DeleteHotel(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteHotel, id)
	return err
}

const getHotel = `-- name: GetHotel :one
SELECT id, name, email, address, contact FROM hotel
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHotel(ctx context.Context, id int32) (Hotel, error) {
	row := q.db.QueryRowContext(ctx, getHotel, id)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Contact,
	)
	return i, err
}

const updateHotel = `-- name: UpdateHotel :one
UPDATE hotel
SET name = $2,
    address = $3,
    contact = $4
WHERE id = $1
RETURNING id, name, email, address, contact
`

type UpdateHotelParams struct {
	ID      int32  `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
	Contact string `json:"contact"`
}

func (q *Queries) UpdateHotel(ctx context.Context, arg UpdateHotelParams) (Hotel, error) {
	row := q.db.QueryRowContext(ctx, updateHotel,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Contact,
	)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Contact,
	)
	return i, err
}
