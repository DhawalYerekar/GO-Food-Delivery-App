// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package db

import (
	"context"
	"database/sql"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  order_id,payment_mode,status
) VALUES (
  $1, $2,$3
)
RETURNING id, order_id, payment_mode, status, payment_time
`

type CreatePaymentParams struct {
	OrderID     sql.NullInt32  `json:"order_id"`
	PaymentMode sql.NullString `json:"payment_mode"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment, arg.OrderID, arg.PaymentMode, arg.Status)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PaymentMode,
		&i.Status,
		&i.PaymentTime,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, order_id, payment_mode, status, payment_time FROM payments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PaymentMode,
		&i.Status,
		&i.PaymentTime,
	)
	return i, err
}

const getPaymentsByOrderID = `-- name: GetPaymentsByOrderID :many
SELECT id, order_id, payment_mode, status, payment_time FROM payments
WHERE order_id = $1
`

func (q *Queries) GetPaymentsByOrderID(ctx context.Context, orderID sql.NullInt32) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.PaymentMode,
			&i.Status,
			&i.PaymentTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentMode = `-- name: UpdatePaymentMode :one
UPDATE payments
SET payment_mode = $2
WHERE id = $1
RETURNING id, order_id, payment_mode, status, payment_time
`

type UpdatePaymentModeParams struct {
	ID          int32          `json:"id"`
	PaymentMode sql.NullString `json:"payment_mode"`
}

func (q *Queries) UpdatePaymentMode(ctx context.Context, arg UpdatePaymentModeParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentMode, arg.ID, arg.PaymentMode)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PaymentMode,
		&i.Status,
		&i.PaymentTime,
	)
	return i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one

UPDATE payments
SET status = $2
WHERE id = $1
RETURNING id, order_id, payment_mode, status, payment_time
`

type UpdatePaymentStatusParams struct {
	ID     int32          `json:"id"`
	Status sql.NullString `json:"status"`
}

// -- name: ListOrdersByUserID :many
// SELECT * FROM orders
// WHERE user_id = $1
// ORDER BY order_time DESC;
func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentStatus, arg.ID, arg.Status)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PaymentMode,
		&i.Status,
		&i.PaymentTime,
	)
	return i, err
}
