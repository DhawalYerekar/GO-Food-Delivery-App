// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  user_id,hotel_id,status,total_amount
) VALUES (
  $1, $2,$3,$4
)
RETURNING id, user_id, hotel_id, order_time, status, total_amount
`

type CreateOrderParams struct {
	UserID      sql.NullInt32  `json:"user_id"`
	HotelID     sql.NullInt32  `json:"hotel_id"`
	Status      sql.NullString `json:"status"`
	TotalAmount sql.NullString `json:"total_amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.HotelID,
		arg.Status,
		arg.TotalAmount,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.HotelID,
		&i.OrderTime,
		&i.Status,
		&i.TotalAmount,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, hotel_id, order_time, status, total_amount FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.HotelID,
		&i.OrderTime,
		&i.Status,
		&i.TotalAmount,
	)
	return i, err
}

const listOrdersByUserID = `-- name: ListOrdersByUserID :many
SELECT id, user_id, hotel_id, order_time, status, total_amount FROM orders
WHERE user_id = $1
ORDER BY order_time DESC
`

func (q *Queries) ListOrdersByUserID(ctx context.Context, userID sql.NullInt32) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.HotelID,
			&i.OrderTime,
			&i.Status,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderAmount = `-- name: UpdateOrderAmount :one
UPDATE orders
SET total_amount = $2
WHERE id = $1
RETURNING id, user_id, hotel_id, order_time, status, total_amount
`

type UpdateOrderAmountParams struct {
	ID          int32          `json:"id"`
	TotalAmount sql.NullString `json:"total_amount"`
}

func (q *Queries) UpdateOrderAmount(ctx context.Context, arg UpdateOrderAmountParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderAmount, arg.ID, arg.TotalAmount)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.HotelID,
		&i.OrderTime,
		&i.Status,
		&i.TotalAmount,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2
WHERE id = $1
RETURNING id, user_id, hotel_id, order_time, status, total_amount
`

type UpdateOrderStatusParams struct {
	ID     int32          `json:"id"`
	Status sql.NullString `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.HotelID,
		&i.OrderTime,
		&i.Status,
		&i.TotalAmount,
	)
	return i, err
}
