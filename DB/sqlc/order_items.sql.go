// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_items.sql

package db

import (
	"context"
	"database/sql"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  order_id,food_id,quantity
) VALUES (
  $1, $2,$3
)
RETURNING id, order_id, food_id, quantity
`

type CreateOrderItemParams struct {
	OrderID  sql.NullInt32 `json:"order_id"`
	FoodID   sql.NullInt32 `json:"food_id"`
	Quantity sql.NullInt32 `json:"quantity"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem, arg.OrderID, arg.FoodID, arg.Quantity)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.FoodID,
		&i.Quantity,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT id, order_id, food_id, quantity FROM order_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderItem(ctx context.Context, id int32) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.FoodID,
		&i.Quantity,
	)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, order_id, food_id, quantity FROM order_items
WHERE order_id = $1
`

func (q *Queries) ListOrderItems(ctx context.Context, orderID sql.NullInt32) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.FoodID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items
SET food_id = $2
WHERE id = $1
RETURNING id, order_id, food_id, quantity
`

type UpdateOrderItemParams struct {
	ID     int32         `json:"id"`
	FoodID sql.NullInt32 `json:"food_id"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItem, arg.ID, arg.FoodID)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.FoodID,
		&i.Quantity,
	)
	return i, err
}

const updateOrderItemQuantity = `-- name: UpdateOrderItemQuantity :one
UPDATE order_items
SET quantity = $2
WHERE id = $1
RETURNING id, order_id, food_id, quantity
`

type UpdateOrderItemQuantityParams struct {
	ID       int32         `json:"id"`
	Quantity sql.NullInt32 `json:"quantity"`
}

func (q *Queries) UpdateOrderItemQuantity(ctx context.Context, arg UpdateOrderItemQuantityParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItemQuantity, arg.ID, arg.Quantity)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.FoodID,
		&i.Quantity,
	)
	return i, err
}
