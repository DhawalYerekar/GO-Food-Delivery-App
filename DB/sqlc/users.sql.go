// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,username,age,email,password,address,contact,gender
) VALUES (
  $1, $2,$3,$4,$5,$6,$7,$8
)
RETURNING id, name, username, age, email, password, address, contact, gender, created_at
`

type CreateUserParams struct {
	Name     string         `json:"name"`
	Username sql.NullString `json:"username"`
	Age      sql.NullInt32  `json:"age"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
	Address  string         `json:"address"`
	Contact  string         `json:"contact"`
	Gender   sql.NullString `json:"gender"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Age,
		arg.Email,
		arg.Password,
		arg.Address,
		arg.Contact,
		arg.Gender,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Age,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.Contact,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username, age, email, password, address, contact, gender, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Age,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.Contact,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT id, name, username, age, email, password, address, contact, gender, created_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) LoginUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Age,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.Contact,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2,
    address = $3,
    contact = $4
WHERE id = $1
RETURNING id, name, username, age, email, password, address, contact, gender, created_at
`

type UpdateUserParams struct {
	ID      int32  `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
	Contact string `json:"contact"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Contact,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Age,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.Contact,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}
