// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dishes.sql

package db

import (
	"context"
	"database/sql"
)

const createDish = `-- name: CreateDish :one
INSERT INTO dishes (
  name,type,price,hotel_id
) VALUES (
  $1, $2,$3,$4
)
RETURNING id, name, type, price, hotel_id
`

type CreateDishParams struct {
	Name    string         `json:"name"`
	Type    sql.NullString `json:"type"`
	Price   string         `json:"price"`
	HotelID sql.NullInt32  `json:"hotel_id"`
}

func (q *Queries) CreateDish(ctx context.Context, arg CreateDishParams) (Dish, error) {
	row := q.db.QueryRowContext(ctx, createDish,
		arg.Name,
		arg.Type,
		arg.Price,
		arg.HotelID,
	)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Price,
		&i.HotelID,
	)
	return i, err
}

const deleteDish = `-- name: DeleteDish :exec
DELETE FROM dishes
WHERE id = $1
`

func (q *Queries) DeleteDish(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDish, id)
	return err
}

const getDish = `-- name: GetDish :one
SELECT id, name, type, price, hotel_id FROM dishes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDish(ctx context.Context, id int32) (Dish, error) {
	row := q.db.QueryRowContext(ctx, getDish, id)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Price,
		&i.HotelID,
	)
	return i, err
}

const getDishesByHotelID = `-- name: GetDishesByHotelID :many
SELECT id, name, type, price, hotel_id FROM dishes
WHERE hotel_id = $1
`

func (q *Queries) GetDishesByHotelID(ctx context.Context, hotelID sql.NullInt32) ([]Dish, error) {
	rows, err := q.db.QueryContext(ctx, getDishesByHotelID, hotelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dish
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Price,
			&i.HotelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDishesByName = `-- name: ListDishesByName :many
SELECT id, name, type, price, hotel_id FROM dishes
WHERE name = $1
`

func (q *Queries) ListDishesByName(ctx context.Context, name string) ([]Dish, error) {
	rows, err := q.db.QueryContext(ctx, listDishesByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dish
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Price,
			&i.HotelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDish = `-- name: UpdateDish :one
UPDATE dishes
SET name = $2,
    type = $3,
    price = $4
WHERE id = $1
RETURNING id, name, type, price, hotel_id
`

type UpdateDishParams struct {
	ID    int32          `json:"id"`
	Name  string         `json:"name"`
	Type  sql.NullString `json:"type"`
	Price string         `json:"price"`
}

func (q *Queries) UpdateDish(ctx context.Context, arg UpdateDishParams) (Dish, error) {
	row := q.db.QueryRowContext(ctx, updateDish,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Price,
	)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Price,
		&i.HotelID,
	)
	return i, err
}
